

Servlet优势

在服务器上仅有一个Java虚拟机在运行，其优势在于当多个来自客户端的请求访问时，Servlet为每个请求分配一个线程，而不是进程。


部署步骤

1，将servlet源文件编译成class文件或导出成*.war文件。
2，将class文件或war包放在WEB-INF/classes路径下，如果servlet有包名，还应该将class文件放在对应的包路径下。
3，在web.xml中配置servlet。


生命周期

servlet在容器中运行时，其实例的创建及销毁都不是由程序员决定的，而是由Web容器进行控制的。
servlet从“不存在”状态迁移到“初始化”状态（这意味着已经准备好为客户请求提供服务），首先是从构造函数开始，
但是构造函数只是使之成为一个对象，而不是一个 servlet。要想成为一个 servlet，对象必须具备一些 servlet 特性。
当容器为servlet建立一个 ServletConfig 并调用其init()方法后，对象将成为一个servlet，它会得到 servlet 该有的所有特权，比如能够使用 ServletContext 引用从容器得到信息。

每个servlet的运行都遵循如下生命周期：
1，创建servlet实例。
有两个时机：
当客户端第一次请求某个servlet时，系统创建其实例，大部分的servlet都是这样。
Web应用启动时立即创建servlet实例，即 load-on-startup servlet。
2，Web容器调用servlet的init方法，对servlet进行初始化。
3，servlet初始化后，将一直存在于容器中，用于响应客户端请求。
4，Web容器决定销毁servlet时，先调用其destroy方法，通常在关闭Web应用之时销毁servlet。


ServletConfig 对象

每个 Servlet 都有一个 ServletConfig 对象。
用于向 servlet 传递部署时信息（例如数据库信息），而你不想把这个信息硬编码写到 servlet 中（servlet初始化参数）。
用于访问 ServletContext。


ServletContext 对象

每个Web应用有一个 ServletContext。
用于访问 Web 应用参数（在部署描述文件中配置）。
用于得到服务器信息，包括容器名和容器版本，以及所支持API的版本等。
