<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  version="3.0">
  
  	<!-- 配置servlet -->
  	<servlet>
	   <!-- 指定servlet的名字 -->
	   <servlet-name>servletdemo</servlet-name>
	   <!-- 指定servlet的实现类全类名 -->
	   <servlet-class>servlet.ServletTest</servlet-class>
	   <!-- 配置servlet的初始化参数，可以配置多个参数 -->
	   <init-param>
	      <param-name>id</param-name>
	      <param-value>tom</param-value>
	   </init-param>
	   <init-param>
	      <param-name>password</param-name>
	      <param-value>ttoomm</param-value>
	   </init-param>
	   
	   <!--
	        默认情况下，servlet会在第一次请求到来时被实例化。
	        如果希望在部署时（或在服务器重启时）加载 servlet，而不是等到第一个请求到来时才加载，可以使用 <load-on-startup> 元素。
	        如果<load-on-startup> 的值非负，就是告诉容器要在应用部署时（或服务器重启时）初始化 servlet。
	        
	        如果想预加载多个 servlet，而且想控制它们的初始化顺序，完全可以靠 <load-on-startup> 的值来决定顺序。
	        非负值意味着要预先加载，但加载的具体顺序则取决于不同 <load-on-startup> 元素的值，值越小优先级越高，值一样则按 servlet 出现顺序来加载。
	        
	        一般很少使用的 servlet 不需要提前加载，而那些初始化耗时太长的 servlet 往往需要预先加载。
	   -->
	   <load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
	   <servlet-name>servletdemo</servlet-name>
	   <!-- 指定servlet映射的URL地址 -->
	   <url-pattern>/sdemo.do</url-pattern>
	</servlet-mapping>
	
	<!-- 配置filter -->
	<filter>
	   <!-- 指定filter的名字 -->
	   <filter-name>filterdemo</filter-name>
	   <!-- 指定filter的实现类全类名 -->
	   <filter-class>filter.FilterTest</filter-class>
	   <!-- 配置filter的初始化参数，可以配置多个参数 -->
	   <init-param>
	      <param-name>loginPage</param-name>
	      <param-value>/index.html</param-value>
	   </init-param>
	</filter>
	
	<filter-mapping>
	   <filter-name>filterdemo</filter-name>
	   <!-- 
	   <url-pattern> 或 <servlet-name> 元素这两者中必须有一个：
	   <url-pattern>：定义了哪些 Web 应用资源要使用这个过滤器。
	   <servlet-name>：定义了哪个 servlet 要使用这个过滤器。
	   
	        当多个过滤器映射到一个给定资源时，容器会先找到与 URL模式匹配的所有过滤器，然后才是与  <servlet-name> 匹配的过滤器。 
	   -->
	   <!-- Filter负责拦截的URL，* 表示全部拦截。 -->
	   <url-pattern>/*</url-pattern>
	   <!--  
	   <dispatcher>：指定只拦截资源被 Servlet 容器调用的哪种方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。
	       可以设置多个<dispatcher> 子元素用来指定 Filter 对资源的多种调用方式进行拦截。
	       
	   REQUEST：
	        当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问或ERROR情况时，那么该过滤器就不会被调用。
 	   INCLUDE：
 	        如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。
	   FORWARD：
	        如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。
	   ERROR：
	        如若在A.jsp页面page指令中指定了error属性=examError.jsp，那么A.jsp中若出现了异常，会跳转到examError.jsp中处理。
	        而在跳转到examError.jsp时，若过滤器配置了ERROR的dispather那么则会拦截，否则不会拦截。
	   -->
	   <dispatcher>FORWARD</dispatcher>
	   <dispatcher>INCLUDE</dispatcher>
	   <dispatcher>REQUEST</dispatcher>
	   <dispatcher>ERROR</dispatcher>
	</filter-mapping>

	<!-- 配置UrlRewriteFilter  -->
	<filter>
		<filter-name>UrlRewriteFilter</filter-name>
		<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>UrlRewriteFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	
	<!-- 配置listener -->
	<listener>
		<!-- 指定listener的实现类全类名即可 -->
		<listener-class>listener.MyServletContextListener</listener-class>
	</listener>
	
	<!-- 注册引用的资源，如JNDI资源，详见文件META-INF/context.xml -->
	<resource-ref> 
		<!-- 引用资源描述 -->
        <description>DBConnection</description>
        <!-- 引用资源的JNDI名 -->
        <res-ref-name>jdbc/test</res-ref-name>
        <!-- 引用资源的类名 --> 
        <res-type>javax.sql.DataSource</res-type>
        <!-- 管理者： Container －容器管理，Application－Web应用管理。 --> 
        <res-auth>Container</res-auth> 
    </resource-ref>

	<session-config>
		<!-- 全局 session 超时设置，单位为分钟 -->
		<session-timeout>1</session-timeout>
	</session-config>
    
    <!-- demo 相关配置 -->
    
    <listener>
    	<listener-class>listener.demo.OnlineUserListener</listener-class>
    </listener>
    
    <listener>
    	<listener-class>ws.WSServer</listener-class>
    </listener>
    
    <filter>
	   <filter-name>logFilter</filter-name>
	   <filter-class>filter.demo.LogFilter</filter-class>
	</filter>
	
	<filter-mapping>
	   <filter-name>logFilter</filter-name>
	   <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
	   <filter-name>ceFilter</filter-name>
	   <filter-class>filter.demo.CharacterEncodingFilter</filter-class>
	   <init-param>
	   		<param-name>encoding</param-name>
	   		<param-value>GBK</param-value>
	   </init-param>
	</filter>
	
	<filter-mapping>
	   <filter-name>ceFilter</filter-name>
	   <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 图片防盗链Filter -->
	<filter>
	   <filter-name>imageRedirectFilter</filter-name>
	   <filter-class>filter.demo.ImageRedirectFilter</filter-class>
	</filter>
	
	<filter-mapping>
	   <filter-name>imageRedirectFilter</filter-name>
	   <!-- 只过滤盗链图片的链接 -->
	   <url-pattern>/images/*</url-pattern>
	</filter-mapping>
	
	<servlet>
	   <servlet-name>countryServlet</servlet-name>
	   <servlet-class>servlet.demo.CountryServlet</servlet-class>
	</servlet>
	
	<servlet-mapping>
	   <servlet-name>countryServlet</servlet-name>
	   <url-pattern>/country.do</url-pattern>
	</servlet-mapping>
	
	<servlet>
	   <servlet-name>downloadServlet</servlet-name>
	   <servlet-class>servlet.demo.FileDownloadServlet</servlet-class>
	</servlet>
	
	<servlet-mapping>
	   <servlet-name>downloadServlet</servlet-name>
	   <url-pattern>/download.do</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>downloadServlet2</servlet-name>
		<servlet-class>servlet.demo.FileDownloadServlet2</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>downloadServlet2</servlet-name>
		<url-pattern>/download2.do</url-pattern>
	</servlet-mapping>
	
	<servlet>
	   <servlet-name>jndiTestServlet</servlet-name>
	   <servlet-class>servlet.demo.JndiTestServlet</servlet-class>
	</servlet>
	
	<servlet-mapping>
	   <servlet-name>jndiTestServlet</servlet-name>
	   <url-pattern>/jnditest.do</url-pattern>
	</servlet-mapping>

	<servlet>
	   <servlet-name>ResponseTest</servlet-name>
	   <servlet-class>servlet.ResponseTest</servlet-class>
	</servlet>
	
	<servlet-mapping>
	   <servlet-name>ResponseTest</servlet-name>
	   <url-pattern>/responsetest.do</url-pattern>
	</servlet-mapping>

	<!--  
	配置欢迎文件
	
	如果为各个Web应用配置默认页面（也成为欢迎页面）？可以在 web.xml 中进行配置，当客户输入一部分URL时，容器要决定选择哪个页面。
	所谓部分URL是指这个URL只有一部分（比如一个目录），而不包括目录中的特定资源（比如 http://www.myapp.com/foo/bar）。
	
	假设某个Web应用，其中多个不同的目录有其自己默认HTML页面，名为“index.html”；而另外一些目录使用的是“default.jsp”，
	可以通过在 web.xml 中使用 <welcome-file-list> 进行统一配置。这样一来，不论请求哪个目录，容器总是按同一个列表查找，也就是这个唯一的 <welcome-file-list>。
	容器会从 <welcome-file-list> 所列的第一个欢迎文件开始，选择找到的第一个进行匹配。
	-->
	<welcome-file-list>
		<!-- 注意，文件名不以斜线 / 开头 -->
		<welcome-file>index.html</welcome-file>
		<welcome-file>home.html</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!-- 
	配置错误页面 
	
	可以使用 	<error-page> 配置统一的错误页面，共有如下三种方式：
	-->
	
	<!-- 1，声明一个普遍型的错误页面 -->
	<error-page>
		<!-- <exception-type> 可以声明的异常类型包括  java.lang.Throwable 的所有子类型。-->
		<exception-type>java.lang.Throwable</exception-type>
		<location>/error.jsp</location>
	</error-page>
	
	<!-- 2，为更明确的异常声明一个错误页面 -->
	<error-page>
		<!-- 
		即便有 1 的存在，当遇到 NullPointerException 时，页面也会自动跳转到 npeError.jsp，其他异常将跳转到 error.jsp。  
		这里的异常类必须是完全限定类名。
		-->
		<exception-type>java.lang.NullPointerException</exception-type>
		<location>/npeError.jsp</location>
	</error-page>
	
	<!-- 
	3，根据一个 HTTP 状态码声明错误页面 
	
	可以根据 HTTP 状态码或根据抛出的异常类型配置错误页面，但不能在一个 <error-page> 标记中同时使用这两个。
	-->
	<error-page>
		<!-- 当响应的状态码是 404 时才调用这个错误页面。 -->
		<error-code>404</error-code>
		<location>/notFoundError.jsp</location>
	</error-page>
</web-app>